name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Bump version
        id: version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Bump version
          npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
          
          # Get new version
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Commit and push
          git add package.json package-lock.json
          git commit -m "chore: bump version to $VERSION"
          git push

  build:
    needs: prepare
    strategy:
      matrix:
        os: [macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main  # Get the latest commit with version bump

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for macOS
        run: npm run dist:mac -- --publish never
        env:
          CSC_LINK: ${{ secrets.SIGNING_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.CERT_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mac-build
          path: |
            release/*.dmg

  release:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.prepare.outputs.version }}
          name: Release v${{ needs.prepare.outputs.version }}
          body: |
            ## Release v${{ needs.prepare.outputs.version }}
            
            ### macOS Downloads
            - Intel: `Listener.AI-${{ needs.prepare.outputs.version }}.dmg`
            - Apple Silicon: `Listener.AI-${{ needs.prepare.outputs.version }}-arm64.dmg`
            
            ### Installation
            1. Download the appropriate DMG for your Mac
            2. Open the DMG and drag to Applications
            3. Open the app normally - it's fully signed and notarized!
          draft: false
          artifacts: |
            release-artifacts/mac-build/*.dmg
          token: ${{ secrets.GITHUB_TOKEN }}